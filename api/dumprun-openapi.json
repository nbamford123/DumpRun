{
	"openapi": "3.0.0",
	"info": {
		"title": "Dump Pickup API",
		"version": "1.0.0",
		"description": "API for managing dump pickup requests, user accounts, and driver operations."
	},
	"paths": {
		"/health/postgres": {
			"get": {
				"summary": "Check PostgreSQL database health",
				"operationId": "checkPostgresHealth",
				"tags": ["Health"],
				"security": [
					{
						"CognitoAuth": []
					}
				],
				"x-amazon-apigateway-integration": {
					"uri": "arn:aws:apigateway:${aws_region}:lambda:path/2015-03-31/functions/${postgres_health_lambda_arn}/invocations",
					"httpMethod": "POST",
					"type": "AWS_PROXY"
				},
				"responses": {
					"200": {
						"description": "PostgreSQL database is healthy",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HealthCheck"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/Unauthorized"
					},
					"403": {
						"$ref": "#/components/responses/Forbidden"
					},
					"500": {
						"$ref": "#/components/responses/InternalServerError"
					}
				}
			}
		},
		"/health/dynamodb": {
			"get": {
				"summary": "Check DynamoDB health",
				"operationId": "checkDynamoDBHealth",
				"tags": ["Health"],
				"security": [
					{
						"CognitoAuth": []
					}
				],
				"x-amazon-apigateway-integration": {
					"uri": "arn:aws:apigateway:${aws_region}:lambda:path/2015-03-31/functions/${dynamodb_health_lambda_arn}/invocations",
					"httpMethod": "POST",
					"type": "AWS_PROXY"
				},
				"responses": {
					"200": {
						"description": "DynamoDB is healthy",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HealthCheck"
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/Unauthorized"
					},
					"403": {
						"$ref": "#/components/responses/Forbidden"
					},
					"500": {
						"$ref": "#/components/responses/InternalServerError"
					}
				}
			}
		},
		"/users": {
			"post": {
				"summary": "Create a new user account",
				"operationId": "createUser",
				"tags": ["Users"],
				"security": [
					{
						"CognitoAuth": []
					}
				],
				"x-amazon-apigateway-integration": {
					"uri": "arn:aws:apigateway:${aws_region}:lambda:path/2015-03-31/functions/${create_user_lambda_arn}/invocations",
					"httpMethod": "POST",
					"type": "AWS_PROXY"
				},
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/NewUser"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "User created successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/BadRequest"
					},
					"500": {
						"$ref": "#/components/responses/InternalServerError"
					}
				}
			},
			"get": {
				"summary": "List all users",
				"operationId": "listUsers",
				"tags": ["Users"],
				"security": [
					{
						"CognitoAuth": []
					}
				],
				"x-amazon-apigateway-integration": {
					"uri": "arn:aws:apigateway:${aws_region}:lambda:path/2015-03-31/functions/${list_users_lambda_arn}/invocations",
					"httpMethod": "POST",
					"type": "AWS_PROXY"
				},
				"parameters": [
					{
						"in": "query",
						"name": "limit",
						"schema": {
							"type": "integer",
							"minimum": 1,
							"maximum": 100,
							"default": 20
						}
					},
					{
						"in": "query",
						"name": "offset",
						"schema": {
							"type": "integer",
							"minimum": 0,
							"default": 0
						}
					}
				],
				"responses": {
					"200": {
						"description": "List of users",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"users": {
											"type": "array",
											"items": {
												"$ref": "#/components/schemas/User"
											}
										},
										"total": {
											"type": "integer"
										}
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/Unauthorized"
					},
					"403": {
						"$ref": "#/components/responses/Forbidden"
					},
					"500": {
						"$ref": "#/components/responses/InternalServerError"
					}
				}
			}
		},
		"/users/{userId}": {
			"get": {
				"summary": "Get a user by ID",
				"operationId": "getUser",
				"tags": ["Users"],
				"security": [
					{
						"CognitoAuth": []
					}
				],
				"x-amazon-apigateway-integration": {
					"uri": "arn:aws:apigateway:${aws_region}:lambda:path/2015-03-31/functions/${get_user_lambda_arn}/invocations",
					"httpMethod": "POST",
					"type": "AWS_PROXY"
				},
				"parameters": [
					{
						"in": "path",
						"name": "userId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "User details",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/BadRequest"
					},
					"401": {
						"$ref": "#/components/responses/Unauthorized"
					},
					"403": {
						"$ref": "#/components/responses/Forbidden"
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					},
					"500": {
						"$ref": "#/components/responses/InternalServerError"
					}
				}
			},
			"put": {
				"summary": "Update a user",
				"operationId": "updateUser",
				"tags": ["Users"],
				"security": [
					{
						"CognitoAuth": []
					}
				],
				"x-amazon-apigateway-integration": {
					"uri": "arn:aws:apigateway:${aws_region}:lambda:path/2015-03-31/functions/${update_user_lambda_arn}/invocations",
					"httpMethod": "POST",
					"type": "AWS_PROXY"
				},
				"parameters": [
					{
						"in": "path",
						"name": "userId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateUser"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "User updated successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/BadRequest"
					},
					"401": {
						"$ref": "#/components/responses/Unauthorized"
					},
					"403": {
						"$ref": "#/components/responses/Forbidden"
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					},
					"500": {
						"$ref": "#/components/responses/InternalServerError"
					}
				}
			},
			"delete": {
				"summary": "Delete a user",
				"operationId": "deleteUser",
				"tags": ["Users"],
				"security": [
					{
						"CognitoAuth": []
					}
				],
				"x-amazon-apigateway-integration": {
					"uri": "arn:aws:apigateway:${aws_region}:lambda:path/2015-03-31/functions/${delete_user_lambda_arn}/invocations",
					"httpMethod": "POST",
					"type": "AWS_PROXY"
				},
				"parameters": [
					{
						"in": "path",
						"name": "userId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "User deleted successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User"
								}
							}
						}
					},
					"400": {
						"$ref": "#/components/responses/BadRequest"
					},
					"401": {
						"$ref": "#/components/responses/Unauthorized"
					},
					"403": {
						"$ref": "#/components/responses/Forbidden"
					},
					"404": {
						"$ref": "#/components/responses/NotFound"
					},
					"500": {
						"$ref": "#/components/responses/InternalServerError"
					}
				}
			}
		}
	},
	"components": {
		"securitySchemes": {
			"CognitoAuth": {
				"type": "apiKey",
				"name": "Authorization",
				"in": "header",
				"x-amazon-apigateway-authtype": "cognito_user_pools",
				"x-amazon-apigateway-authorizer": {
					"type": "cognito_user_pools",
					"providerARNs": ["${cognito_user_pool_arn}"]
				}
			}
		},
		"schemas": {
			"HealthCheck": {
				"type": "object",
				"required": ["status", "timestamp"],
				"properties": {
					"status": {
						"type": "string",
						"enum": ["healthy", "unhealthy"],
						"description": "Current health status of the PostgreSQL database"
					},
					"timestamp": {
						"type": "string",
						"format": "date-time",
						"description": "Time when the health check was performed"
					},
					"latency": {
						"type": "number",
						"description": "Query latency in milliseconds"
					},
					"error": {
						"type": "string",
						"description": "Error message when status is unhealthy"
					}
				}
			},
			"NewUser": {
				"type": "object",
				"required": ["name", "email", "phone", "address"],
				"properties": {
					"name": {
						"type": "string",
						"minLength": 1,
						"maxLength": 100
					},
					"email": {
						"type": "string",
						"format": "email"
					},
					"phone": {
						"type": "string",
						"pattern": "^\\+?[1-9]\\d{1,14}$|^\\d{3}-\\d{3}-\\d{4}$"
					},
					"address": {
						"type": "string"
					}
				}
			},
			"UpdateUser": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"minLength": 1,
						"maxLength": 100
					},
					"phone": {
						"type": "string",
						"pattern": "^\\+?[1-9]\\d{1,14}$|^\\d{3}-\\d{3}-\\d{4}$"
					},
					"address": {
						"type": "string"
					}
				}
			},
			"User": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"phone": {
						"type": "string"
					},
					"address": {
						"type": "string"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					}
				}
			},
			"NewDriver": {
				"type": "object",
				"required": [
					"name",
					"email",
					"phone",
					"address",
					"vehicleMake",
					"vehicleModel",
					"vehicleYear"
				],
				"properties": {
					"name": {
						"type": "string",
						"minLength": 1,
						"maxLength": 100
					},
					"email": {
						"type": "string",
						"format": "email"
					},
					"phone": {
						"type": "string",
						"pattern": "^\\+?[1-9]\\d{1,14}$|^\\d{3}-\\d{3}-\\d{4}$"
					},
					"address": {
						"type": "string"
					},
					"vehicleMake": {
						"type": "string"
					},
					"vehicleModel": {
						"type": "string"
					},
					"vehicleYear": {
						"type": "number"
					}
				}
			},
			"UpdateDriver": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"minLength": 1,
						"maxLength": 100
					},
					"phone": {
						"type": "string",
						"pattern": "^\\+?[1-9]\\d{1,14}$|^\\d{3}-\\d{3}-\\d{4}$"
					},
					"address": {
						"type": "string"
					},
					"vehicleMake": {
						"type": "string"
					},
					"vehicleModel": {
						"type": "string"
					},
					"vehicleYear": {
						"type": "number"
					}
				}
			},
			"Driver": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"phone": {
						"type": "string"
					},
					"address": {
						"type": "string"
					},
					"vehicleMake": {
						"type": "string"
					},
					"vehicleModel": {
						"type": "string"
					},
					"vehicleYear": {
						"type": "number"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					}
				}
			},
			"NewPickup": {
				"type": "object",
				"required": [
					"location",
					"estimatedWeight",
					"requestedTime",
					"wasteType"
				],
				"properties": {
					"location": {
						"type": "string"
					},
					"estimatedWeight": {
						"type": "number",
						"format": "float"
					},
					"wasteType": {
						"type": "string"
					},
					"requestedTime": {
						"type": "string",
						"format": "date-time"
					}
				}
			},
			"UpdatePickup": {
				"type": "object",
				"properties": {
					"location": {
						"type": "string"
					},
					"estimatedWeight": {
						"type": "number",
						"format": "float",
						"minimum": 1
					},
					"wasteType": {
						"type": "string",
						"enum": ["household", "construction", "green", "electronic"]
					},
					"requestedTime": {
						"type": "string",
						"format": "date-time"
					},
					"status": {
						"type": "string",
						"enum": [
							"pending",
							"available",
							"accepted",
							"in_progress",
							"completed",
							"cancelled",
							"deleted"
						]
					}
				},
				"additionalProperties": false
			},
			"Pickup": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"userId": {
						"type": "string"
					},
					"driverId": {
						"type": "string",
						"nullable": true
					},
					"status": {
						"type": "string",
						"enum": [
							"pending",
							"available",
							"accepted",
							"in_progress",
							"completed",
							"cancelled",
							"deleted"
						]
					},
					"location": {
						"type": "string"
					},
					"estimatedWeight": {
						"type": "number",
						"format": "float",
						"minimum": 1
					},
					"wasteType": {
						"type": "string",
						"enum": ["household", "construction", "green", "electronic"]
					},
					"requestedTime": {
						"type": "string",
						"format": "date-time"
					},
					"assignedTime": {
						"type": "string",
						"format": "date-time"
					},
					"completedTime": {
						"type": "string",
						"format": "date-time"
					},
					"deletedAt": {
						"type": "string",
						"format": "date-time"
					}
				}
			},
			"Error": {
				"type": "object",
				"properties": {
					"code": {
						"type": "string"
					},
					"message": {
						"type": "string"
					}
				}
			}
		},
		"responses": {
			"BadRequest": {
				"description": "Bad request",
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/Error"
						}
					}
				}
			},
			"Conflict": {
				"description": "The request could not be completed due to a conflict with the current state of the target resource.",
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/Error"
						}
					}
				}
			},
			"Unauthorized": {
				"description": "Unauthorized",
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/Error"
						}
					}
				}
			},
			"Forbidden": {
				"description": "Access forbidden",
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/Error"
						}
					}
				}
			},
			"NotFound": {
				"description": "Resource not found",
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/Error"
						}
					}
				}
			},
			"InternalServerError": {
				"description": "Internal Server Error",
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/Error"
						}
					}
				}
			}
		}
	}
}
